/**
 * Test Page Upload to CF
 * Uploads extracted pages from gulp/.nimbus/maps/ to CF project
 */

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

const apiUrl = 'https://nimbus-platform.martin-598.workers.dev';
const projectId = 'project:mfh4o6amph6zeb'; // From our test project

// Generate deterministic page ID (same logic for both gulp and CF)
function generatePageId(domain, url) {
  const cleanDomain = domain.replace(/[^a-z0-9]/gi, '');
  const cleanUrl = url.replace(/[^a-z0-9\/]/gi, '_');
  const hash = crypto.createHash('sha256').update(domain + url).digest('hex').substring(0, 8);
  return `page:${cleanDomain}_${cleanUrl}_${hash}`;
}

async function uploadPages() {
  try {
    console.log('📦 Uploading pages to CF project...');
    
    // First login to get session
    console.log('1. Logging in...');
    const loginResponse = await fetch(`${apiUrl}/auth/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'nimbus-user-1757447187283@example.com',
        password: 'TestPassword123!'
      })
    });
    
    const loginData = await loginResponse.json();
    if (!loginData.success) {
      throw new Error('Login failed: ' + loginData.error);
    }
    
    console.log('✅ Login successful');
    const sessionToken = loginData.session_token;
    
    // Get list of extracted files
    const mapsDir = path.join(__dirname, 'gulp', '.nimbus', 'maps');
    const extractedFiles = fs.readdirSync(mapsDir).filter(f => f.endsWith('.json'));
    
    console.log(`📋 Found ${extractedFiles.length} extracted pages`);
    console.log(`🎯 Target project: ${projectId}`);
    console.log(`🌐 Domain: www.repairsbypost.com`);
    
    // Upload ALL pages!
    console.log(`🚀 Uploading ALL ${extractedFiles.length} pages!`);
    
    for (let i = 0; i < extractedFiles.length; i++) {
      const file = extractedFiles[i];
      console.log(`\n📄 [${i+1}/${extractedFiles.length}] Processing ${file}...`);
      
      // Load extracted JSON
      const filePath = path.join(mapsDir, file);
      const extracted = JSON.parse(fs.readFileSync(filePath, 'utf8'));
      
      // Skip if missing required fields
      if (!extracted.route || !extracted.head?.title) {
        console.log(`⚠️ [${i+1}/${extractedFiles.length}] Skipping ${file} - missing route or title`);
        continue;
      }
      
      // Generate page ID
      const pageId = generatePageId('www.repairsbypost.com', extracted.route);
      console.log(`🆔 Generated page ID: ${pageId}`);
      
      // Prepare page data
      const pageData = {
        page_id: pageId, // Explicit deterministic ID
        project_id: projectId,
        url: extracted.route,
        title: extracted.head.title,
        status: 'extracted',
        
        // Store complete extraction data in extracted_data field (JSON type)
        extracted_data: {
          head: extracted.head,
          blocks: extracted.blocks,
          above_fold_blocks: extracted.above_fold_blocks,
          rest_of_page_blocks: extracted.rest_of_page_blocks,
          content_dimensions: extracted.content_dimensions || {},
          extraction_stats: extracted.extraction_stats || {},
          route: extracted.route,
          main_selector: extracted.main_selector,
          engine: extracted.engine
        },
        
        // Metadata
        metadata: {
          source: 'gulp_extraction',
          original_path: extracted.path,
          file_name: file,
          extracted_at: new Date().toISOString()
        }
      };
      
      console.log(`📊 Page data size: ${JSON.stringify(pageData).length} bytes`);
      console.log(`🔗 URL: ${extracted.route}`);
      console.log(`📝 Title: ${extracted.head.title.substring(0, 60)}...`);
      
      // Send to CF
      const pageResponse = await fetch(`${apiUrl}/api/function`, {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'X-Session-Token': sessionToken
        },
        body: JSON.stringify({
          action: 'page.create',
          payload: pageData
        })
      });
      
      const pageResult = await pageResponse.json();
      
      if (pageResult.success) {
        console.log(`✅ [${i+1}/${extractedFiles.length}] ${file} uploaded successfully!`);
        console.log(`🆔 CF Page ID: ${pageResult.data?.page_id || pageId}`);
        console.log(`🔗 Live URL: ${pageResult.data?.live_url || 'Will be generated by CF'}`);
      } else {
        console.error(`❌ [${i+1}/${extractedFiles.length}] ${file} upload failed:`, pageResult.error);
      }
      
      // Small delay to avoid overwhelming the API
      if (i < extractedFiles.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 500));
      }
    }
    
    console.log('\n🎉 Page upload test completed!');
    console.log('🔗 Check CF dashboard to see the pages in your project!');
    console.log('📊 Project should now show page count updated');
    
  } catch (error) {
    console.error('❌ Upload failed:', error.message);
  }
}

// Run the upload
uploadPages();
